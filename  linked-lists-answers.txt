
// Exercises

1. What are some pros and cons of using linked lists instead of arrays?

A. Pros: less memory used because each node is independent in memory, the list never contains empty placeholders, linked lists can be very large if needed.

Cons: Inefficient to access the element you are looking for

2. Come up with a real world example of a linked list.

A. Going on a scavenger hunt, each clue leads to another (like nodes) which point to the treasure (data) you are ultimately looking for, but you must follow the clues sequentially to get there.

// Programming Questions

1. // The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
THEN SET head to node
ELSE
SET current to head
SET current.next to node
END IF
END FUNCTION

function Push (element) {

var node = function(element) {
   this.element = element,
   this.next = null
}
if (!this.head) {
   this.head = node;
   return node;
} else {
   current = this.head;
   next = node;
}
}

//The pseudocode should be using the while loop to move to through the nodes. The following implementation would be better:
...
var node = new Node (element);
if (!this.head) {
   this.head = node;
} else {
   current = this.head;

   while (current.next) {
       current = current.next;
   }
   current.next = node;
}
length++;


2. // Given an unsorted singly linked list, remove all duplicates from the linked list.

//Linked List setup
function LinkedList() {
  this.head = null;
  this.length = 0;
}

LinkedList.prototype.push = function(val) {
  var node = {
    value: val,
    next: null,
    current: null,
  };

  if (this.head === null) {
    this.head = node;
    this.length += 1;
    return node;
  } else {
    current = this.head;
    while (current.next != null) {
      current = current.next;
    }
    current.next = node;
    this.length += 1;
    return node;
  }
};

//Code to remove duplicates

LinkedList.prototype.duplicate = function() {
  var currentNode = this.head;
  while (currentNode != null) {
    var previousNode = currentNode;
    var nextNode = currentNode.next;
    while (nextNode != null) {
      if (currentNode.value == nextNode.value) {
        previousNode.next = nextNode.next;
        this.length--;
      } else {
        previousNode = nextNode;
      }
      nextNode = nextNode.next;
    }
    currentNode = currentNode.next;
  }
  return this;
};

list = new LinkedList();
list.push("a");
list.push("b");
list.push("c");
list.push("c");
list.push("d");
list.push("e");
list.duplicate();

console.log(list);


3. Given an unsorted singly linked list, reverse it.

function LinkedList(val) {
  this.val = val;
  this.next = null;
}

function reverseList(head) {
  let node = head, previous, temp; 

  while (node) {
    temp = node.next; 
    node.next = previous;
    previous = node;
    node = temp;
  }
  return previous;
}



